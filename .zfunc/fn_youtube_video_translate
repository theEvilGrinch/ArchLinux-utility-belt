#!/usr/bin/env zsh
# $HOME/.zfunc
fn_youtube_video_translate() {
  local project_name="$1"
  local video_url="$2"
  local src_path="$HOME/videos/translate/src"
  local project_path="$src_path/$project_name"
  local file_name="$project_path/${project_name}"
  local output_video="$HOME/videos/translate/${project_name}"
  local usage=(
    "Usage: fn_youtube_video_translate project_name video_url"
    "Download a YouTube video, extract audio, translate it, and merge back with video"
    "Arguments:"
    "  project_name  Required. Name for the project directory and output files"
    "  video_url     Required. URL of the YouTube video to process"
    "Behavior:"
    "  1. Creates project directory: ~/videos/translate/src/<project_name>/"
    "  2. Uses vot-cli to extract and translate audio to MP3 format"
    "  3. Downloads video using yt-dlp with best quality MP4 format"
    "  4. Merges original video with translated audio using ffmpeg"
    "  5. Outputs final video as: ~/videos/translate/<project_name>_final.mp4"
    "  6. Warns if project directory already exists and asks for confirmation"
    "  7. Automatically cleans up temporary files if process fails"
    "Required tools: vot-cli, yt-dlp, ffmpeg"
  )

  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    printf "%s\n" "${usage[@]}"
    return 0
  fi

  if [[ -z "$project_name" || -z "$video_url" ]]; then
    printf "Error: Both project_name and video_url are required\n"
    printf "%s\n" "${usage[@]}"
    return 1
  fi

  for cmd in vot-cli yt-dlp ffmpeg; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      printf "Error: Required command '%s' is not installed\n" "$cmd"
      return 1
    fi
  done

  if [[ -d "$project_path" ]]; then
    printf "Warning: Project directory already exists: %s\n" "$project_path"
    printf "Continue and overwrite? (y/n) "
    # shellcheck disable=SC2162
    read -q REPLY || return 1
    printf "\n"
fi

  trap 'printf "Cleaning up...\n"; rm -f "${file_name}.mp4" "${file_name}.mp3" 2>/dev/null' ERR

  mkdir -p "$project_path" || {
    printf "Error: Failed to create project directory %s\n" "$project_path"
    return 1
  }
  printf "Project directory created: %s\n" "$project_path"

  printf "Extracting and translating audio...\n"
  vot-cli --output="$project_path" --output-file="${project_name}.mp3" "$video_url" || {
    printf "Error: Failed to extract and translate audio\n"
    return 1
  }
  printf "Audio translation completed\n"

  if [[ ! -f "${file_name}.mp3" ]]; then
    printf "Error: Audio file was not created\n"
    return 1
  fi

  printf "Downloading video...\n"
  yt-dlp -o "${file_name}.mp4" \
      --referer "https://www.youtube.com" \
      --force-generic-extractor \
      --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
      --concurrent-fragments 24 \
      --cookies-from-browser firefox \
      -f "bestvideo[ext=mp4]" \
      "$video_url" || {
      printf "Error: Failed to download video\n"
      return 1
  }
  printf "Video download completed\n"

  if [[ ! -f "${file_name}.mp4" ]]; then
    printf "Error: Video file was not created\n"
    return 1
  fi

  printf "Merging video with translated audio...\n"
  ffmpeg -i "${file_name}.mp4" -hwaccel auto -i "${file_name}.mp3" \
      -c:v copy -map 0:v:0 -map 1:a:0 -filter:a aresample=async=1 \
      -shortest "${output_video}_final.mp4" || {
      printf "Error: Failed to merge video with translated audio\n"
      return 1
  }

  trap - ERR

  printf "Processing completed: %s_final.mp4\n" "$output_video"
}
