#<type>(<scope>): <description>
():

#<body> 


#<footer>


# Тип коммита
#  feat - используется при добавлении новой функциональности.
#  fix - исправление багов.
#  refactor - изменения кода, которые не исправляет баги и не добавляют функционал.
#  chore - изменение конфигов, системы сборки, обновление зависимостей и т.д.
#  test - всё, что связано с тестированием.
#  style - исправление опечаток, изменение форматирования кода (переносы, отступы, точки с запятой и т.п.) без изменения смысла кода.
#  docs - изменения только в документации.
#  perf - изменения кода, повышающие производительность.
#  build - изменения, влияющие на систему сборки или внешние зависимости (webpack, npm).
#  ci - изменения в файлах конфигурации.

# BREAKING CHANGE (критические изменения)
# BREAKING CHANGE: указывается в футере и автоматически добавляется в конец заголовка. Критические изменения - это изменения, нарушающие обратную совместимость. 
# Может быть частью коммита любого типа.
# Должен начинаться с фразы BREAKING CHANGE:, за которой следует краткое изложение критического изменения, пустая строка и подробное описание критического изменения.
#
# Несколько коротких правил
# - Коммиты пишутся на английском языке.
# - Заголовок коммита пишется с маленькой буквы.
# - Точка в конце не ставится.
# - Длина заголовка не должна превышать 100 символов, а лучше 50. Подробности коммита выносятся в тело и футер.
# - Description начинается с глагола. Глагол указывается в настоящем времени, например: add, update, improve, remove (не added, updates) и тд.
#
# Как писать коммит при Pull Request
#  Сообщение коммита при merge PR формируется по такому же принципу как описано выше.
#  В конец заголовка коммита включается номер PR в скобочках после основного сообщения. Например: refactor(Block.ts): update render method (#67)
#  Все сообщения коммитов из сливаемой ветки вносятся в тело коммита.
#  Добавить шаблон в глобальные настройки:
#  git config --global commit.template "$HOME/templates/git-commit-template_ru.txt"